{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-human-detector-project-08072024-mdx-8e468b01296f14b38ebf.js","mappings":"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","sources":["webpack://blog-v1/./blog/HumanDetectorProject_08072024.mdx","webpack://blog-v1/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://blog-v1/./src/components/article.js","webpack://blog-v1/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Project Description\"), \"\\n\", React.createElement(_components.p, null, \"This project uses a version of the YOLO (You Only Look Once) architecture in order to detect if a human is in front of the computer. If detected, an alarm will sound, and using TKinter, an alert pop-up mandating entry of password will be required. It has various customizable settings located in a JSON file including choice of password, choice of alarm-delay, choice of alarm, and others. You can find the Github link here.\"), \"\\n\", React.createElement(_components.h1, null, \"Purpose\"), \"\\n\", React.createElement(_components.p, null, \"This project is less about creating an actual technical concept but demonstrating a basic use-case of pretrained deep-learning-based classifiers and their use in various fields. Impressively, this particular model uses an untrained version of YOLO and is extremely powerful, accurate, and fast!\"), \"\\n\", React.createElement(_components.h1, null, \"Technical Content\"), \"\\n\", React.createElement(_components.p, null, \"In essence, the way YOLO is used in this project is through the inclusion of PyTorch files. We ran YOLO based on the contents of the YOLOv5 repository and got a resulting YOLOv5.pt file. We used PyTorch to analyze this file and start an instance of the image-classification system when the program opened in order to determine if a human was in front. To learn more about how YOLO works and how various deep-learning-based classifiers in the Computer Vision space function, please feel free to visit my notes in the Mathematics of Computer Vision Project.\"), \"\\n\", React.createElement(_components.h1, null, \"Lessons Learned\"), \"\\n\", React.createElement(_components.p, null, \"Very many lessons were learned while making this website/blog. Here are the main ones:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"I had assumed there was a lot more “knowledge” in the application of these deep-learning classifiers to typical modern-day-usage, but this knowledge is practically none.\"), \"\\n\", React.createElement(_components.li, null, \"YOLO is, by far, one of the easiest deep-learning based classifiers to use in order to detect and decipher various objects.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/abhi/Documents/Programs/WebDev/blog-v1/blog/HumanDetectorProject_08072024.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nimport Articles from '../../components/article.js';\nconst BlogPage = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(Articles, {\n    title: data.mdx.frontmatter.title,\n    image: data.mdx.frontmatter.image,\n    description: children,\n    datew: data.mdx.frontmatter.dateMade,\n    datee: data.mdx.frontmatter.dateEdited,\n    tags: data.mdx.frontmatter.tags\n  }));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        dateMade\n        dateEdited\n        slug\n        syn\n        tags\n        image\n      }\n      body\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title\n});\nBlogPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from 'react';\r\nimport './articles.css';\r\n\r\nconst Articles = ({ title, image, description, datew, datee, tags }) => {\r\n  return (\r\n    <>\r\n      <div className=\"container1\">\r\n        <div\r\n          className=\"hero\"\r\n          style={{\r\n            background: `url(${image}) no-repeat center center fixed`,\r\n            backgroundSize: 'cover',\r\n          }}\r\n        >\r\n          <div className=\"hero__image\">\r\n            <div className=\"hero__image--overlay\"></div>\r\n            <div className=\"hero__child hero__child--primary animation--floating\"></div>\r\n            <div className=\"hero__child hero__child--secondary animation--floating\"></div>\r\n            <p className=\"hero__title animation--title-in\">{title}</p>\r\n            <p className=\"hero__subtitle animation--title-in\">by Abhiram Kidambi</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"section\">\r\n        {description}\r\n        <hr/>\r\n        <p className=\"information\">\r\n          Author: Abhiram Kidambi <br/>\r\n          Written: {datew} <br/>\r\n        Tags: {tags.map(tag => tag.toUpperCase()).join(\", \")}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Articles;\r\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ul","li","_provideComponents","components","React","wrapper","MDXLayout","BlogPage","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","Articles","image","description","datew","dateMade","datee","dateEdited","tags","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","className","style","background","backgroundSize","map","tag","toUpperCase","join","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}