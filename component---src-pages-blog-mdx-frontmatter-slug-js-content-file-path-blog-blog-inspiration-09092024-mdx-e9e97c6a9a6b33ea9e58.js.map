{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-blog-inspiration-09092024-mdx-e9e97c6a9a6b33ea9e58.js","mappings":"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","sources":["webpack://blog-v1/./blog/BlogInspiration09092024.mdx","webpack://blog-v1/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://blog-v1/./src/components/article.js","webpack://blog-v1/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Blog Inspiration\"), \"\\n\", React.createElement(_components.p, null, \"I wanted to give some of my thoughts regarding inspiration for this website. To begin, this website took a lot of effort from my end…  well over 30-40 hours over some 4-5 weeks to get some of the styling right, to edit the photos, to pick the fonts, pick the color-schemes, etc…\"), \"\\n\", React.createElement(_components.p, null, \"That being said, I was tempted to chicken out and go with a minimalistic design. The first results when I searched for “portfolio ideas” or “blog ideas” all had the word “minimalistic” somewhere… Many people simply find such code under the MIT License, use it, give no credit, and move on with their life without putting any real effort, and end up a fake-resume-project richer.\"), \"\\n\", React.createElement(_components.p, null, \"But I, on the other hand, absolutely hate minimalism. To me, it’s a reduction of the human spirit. If humans were designed to be minimalistic, every capital city would look like Ashgabat, Turkmenistan -- Soviet-style cookie-cutter ghost-white marble-coated architecture everywhere. And I’m not like that.\"), \"\\n\", React.createElement(_components.p, null, \"I admire clutter and personality. I admire some “uncleanliness” and “disorganization”. I find decorations, whether on the wall, or on my desk, to be additive rather than “producitivity-destroying” as some minimalists might claim (Marie Kwondo, looking at you). It’s part of the reason why I can’t stand the interiors of Teslas and why I love seeing wear-and-tear on my waterbottle or desire-paths in the local park (“human things”, from those who remember the TikTok fad). It’s a small reminder that we exist and we can see our existence in the things that we use, places we live, and things that we make.\"), \"\\n\", React.createElement(_components.p, null, \"(Keep in mind that minor uncleanliness and clutter does not equate to unhygienic/dirty; the argument of “human-spirit” only goes so far until we end up in a caveman-ic society)\"), \"\\n\", React.createElement(_components.h1, null, \"Personal Touches\"), \"\\n\", React.createElement(_components.p, null, \"Now, when I made this website, a huge focus of mine was to add a bunch of personal touches. I wanted someone reading this to not only read about me, but, for lack of better and less-awkward phrasing, \", React.createElement(_components.em, null, \"learn\"), \" who I am. I didn’t want them to see a cookie-cutter portfolio site, but rather, some of the intricate details regarding my personality:\"), \"\\n\", React.createElement(_components.p, null, \"My profile picture has a Star Wars hoodie and is taken in front of some Cherry Blossoms to symbolize my love for the DMV (where I’m from), the spring months, and some of my rather nerdy childhood obsessions.\"), \"\\n\", React.createElement(_components.p, null, \"My color-scheme is screwed up (lots of black, white, gray, and random light blue), an intentional reflection of my colorblindness. As a colorblind individual, I chose to pull a Mark Zuckerburg (fellow colorblind tech guy) and design my site with the colors/schemes I could see best (like how Zuckerburg designed Facebook to be blue for the same reason).\"), \"\\n\", React.createElement(_components.p, null, \"My basketball photos. Needless to say more here, I’m a huge basketball fan.\"), \"\\n\", React.createElement(_components.p, null, \"My language-changing headers. Again, needless to say, I’m a lover of languages, someone who is multilingual, and someone who always loves learning more about different cultures, languages, and societies.\"), \"\\n\", React.createElement(_components.p, null, \"The endless photos of skylines being used as the background for various blog-tag headers are also indicative of my love for cities. I classified the San Francisco skyline for Tech blogposts, the Chicago skyline for Thoughts/Personal blogposts, the New York skyline for Projects blogposts, and the LA skyline for Sports blogposts. Each of these cities, to me, speaks to the tags I selected for them, and all the individual photos were carefully selected through analysis of many Google Image photos.\"), \"\\n\", React.createElement(_components.h1, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"While most of this probably won’t be noticed by anybody, a hope one day is to be able to give my website to others and for them to know a bit about some of my interests, loves, and personality. And for those who don’t, I hope they find this blogpost and read about it in their own right.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/abhi/Documents/Programs/WebDev/blog-gatsby/blog/BlogInspiration09092024.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nimport Articles from '../../components/article.js';\nconst BlogPage = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(Articles, {\n    title: data.mdx.frontmatter.title,\n    image: data.mdx.frontmatter.image,\n    description: children,\n    datew: data.mdx.frontmatter.dateMade,\n    datee: data.mdx.frontmatter.dateEdited,\n    tags: data.mdx.frontmatter.tags\n  }));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        dateMade\n        dateEdited\n        slug\n        syn\n        tags\n        image\n      }\n      body\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title\n});\nBlogPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from 'react';\r\nimport './articles.css';\r\n\r\nconst Articles = ({ title, image, description, datew, datee, tags }) => {\r\n  return (\r\n    <>\r\n      <div className=\"container1\">\r\n        <div\r\n          className=\"hero\"\r\n          style={{\r\n            background: `url(${image}) no-repeat center center fixed`,\r\n            backgroundSize: 'cover',\r\n          }}\r\n        >\r\n          <div className=\"hero__image\">\r\n            <div className=\"hero__image--overlay\"></div>\r\n            <div className=\"hero__child hero__child--primary animation--floating\"></div>\r\n            <div className=\"hero__child hero__child--secondary animation--floating\"></div>\r\n            <p className=\"hero__title animation--title-in\">{title}</p>\r\n            <p className=\"hero__subtitle animation--title-in\">by Abhiram Kidambi</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"section\">\r\n        {description}\r\n        <hr/>\r\n        <p className=\"information\">\r\n          Author: Abhiram Kidambi <br/>\r\n          Written: {datew} <br/>\r\n        Tags: {tags.map(tag => tag.toUpperCase()).join(\", \")}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Articles;\r\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","em","_provideComponents","components","React","wrapper","MDXLayout","BlogPage","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","Articles","image","description","datew","dateMade","datee","dateEdited","tags","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","className","style","background","backgroundSize","map","tag","toUpperCase","join","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}